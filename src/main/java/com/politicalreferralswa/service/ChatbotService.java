package com.politicalreferralswa.service;

import com.google.cloud.firestore.Firestore;
import com.politicalreferralswa.model.User; // Aseg√∫rate de que User.java tiene campos: id (String UUID), phone (String), telegram_chat_id (String)
import org.springframework.stereotype.Service;
import com.google.cloud.Timestamp;
import com.google.cloud.firestore.DocumentSnapshot;
import com.google.cloud.firestore.QuerySnapshot;
import com.google.api.core.ApiFuture;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList; // Importar ArrayList
import java.util.List;     // Importar List
import java.util.Optional;
import java.util.UUID;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

// Aseg√∫rate de que ChatResponse existe y tiene los m√©todos getPrimaryMessage(), getNextChatbotState(), getSecondaryMessage()
// Y un constructor adecuado: ChatResponse(String primaryMessage, String nextState, Optional<String> secondaryMessage)
// O ChatResponse(String primaryMessage, String nextState) si no hay mensaje secundario

@Service
public class ChatbotService {

    private final Firestore firestore;
    private final WatiApiService watiApiService;
    private final TelegramApiService telegramApiService;
    private final AIBotService aiBotService;

    private static final Pattern REFERRAL_MESSAGE_PATTERN = Pattern.compile("Hola, vengo referido por: ([A-Za-z0-9]{8})");
    private static final String TELEGRAM_BOT_USERNAME = "ResetPoliticaBot";
    // Patr√≥n estricto para la validaci√≥n final del n√∫mero de tel√©fono normalizado (con +)
    // Requiere un '+' seguido de 10 a 15 d√≠gitos.
    private static final Pattern STRICT_PHONE_NUMBER_PATTERN = Pattern.compile("^\\+\\d{10,15}$"); 

    public ChatbotService(Firestore firestore, WatiApiService watiApiService,
                          TelegramApiService telegramApiService, AIBotService aiBotService) {
        this.firestore = firestore;
        this.watiApiService = watiApiService;
        this.telegramApiService = telegramApiService;
        this.aiBotService = aiBotService;
    }

    /**
     * M√âTODO DE UTILIDAD PARA CREAR UN USUARIO REFERENTE DE PRUEBA
     */
    public void createTestReferrerUser() {
        String testPhoneNumber = "+573100000001"; // Este ya tiene el '+'
        String testReferralCode = "TESTCODE";

        // Usar la b√∫squeda unificada principal
        Optional<User> existingUser = findUserByAnyIdentifier(testPhoneNumber, "WHATSAPP"); 
        if (existingUser.isPresent()) {
            System.out.println("DEBUG: Usuario referente de prueba '" + testPhoneNumber + "' ya existe. No se crear√° de nuevo.");
            return;
        }

        User testUser = new User();
        testUser.setId(UUID.randomUUID().toString()); // Este ID se usar√° internamente
        testUser.setPhone_code("+57");
        testUser.setPhone(testPhoneNumber); // Se guarda con el '+'
        testUser.setName("Referente de Prueba");
        testUser.setCity("Bogota");
        testUser.setChatbot_state("COMPLETED");
        testUser.setAceptaTerminos(true);
        testUser.setReferral_code(testReferralCode);
        testUser.setCreated_at(Timestamp.now());
        testUser.setUpdated_at(Timestamp.now());
        testUser.setReferred_by_phone(null);

        try {
            saveUser(testUser); // Usar el m√©todo unificado saveUser
            System.out.println("DEBUG: Usuario referente de prueba '" + testUser.getName() + "' con c√≥digo '" + testUser.getReferral_code() + "' creado exitosamente en Firestore.");
        } catch (Exception e) {
            System.err.println("ERROR DEBUG: No se pudo crear el usuario de prueba en Firestore: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * Procesa un mensaje entrante de un usuario.
     *
     * @param fromId El ID del remitente (n√∫mero de tel√©fono para WhatsApp, chat ID para Telegram).
     * @param messageText El texto del mensaje recibido.
     * @param channelType El tipo de canal.
     * @return String La respuesta principal del chatbot (el primer mensaje enviado).
     */
    public String processIncomingMessage(String fromId, String messageText, String channelType) {
        System.out.println("ChatbotService: Procesando mensaje entrante de " + fromId + " (Canal: " + channelType + "): '" + messageText + "'");

        User user = findUserByAnyIdentifier(fromId, channelType).orElse(null);
        boolean isNewUser = (user == null);
        ChatResponse chatResponse = null;

        // Normalizar el fromId de WhatsApp para guardar o actualizar el campo 'phone'
        String normalizedPhoneForWhatsapp = "";
        if ("WHATSAPP".equalsIgnoreCase(channelType)) {
            String cleanedId = fromId.replaceAll("[^\\d+]", ""); // Limpia caracteres no deseados
            if (cleanedId.startsWith("+") && STRICT_PHONE_NUMBER_PATTERN.matcher(cleanedId).matches()) {
                normalizedPhoneForWhatsapp = cleanedId; // Ya viene correcto, ej. "+573123456789"
            } else if (cleanedId.matches("^\\d{10,15}$")) { 
                // Asumimos que es un n√∫mero completo sin el '+' inicial. Para Colombia: "573227281752"
                normalizedPhoneForWhatsapp = "+" + cleanedId; // Se convierte en "+573227281752"
            }
            // Si no cumple estos patrones, normalizedPhoneForWhatsapp se queda vac√≠o.
        }

        if (isNewUser) {
            System.out.println("ChatbotService: Nuevo usuario detectado: " + fromId);
            user = new User();
            user.setId(UUID.randomUUID().toString()); // Se usa como ID temporal para Telegram, o como campo para WhatsApp
            user.setCreated_at(Timestamp.now());
            user.setAceptaTerminos(false);

            if ("WHATSAPP".equalsIgnoreCase(channelType)) {
                user.setPhone_code("+57"); 
                user.setPhone(normalizedPhoneForWhatsapp); // Guarda el n√∫mero normalizado con '+'
                
                // Antes de establecer el estado, intentar detectar el referido en el primer mensaje
                chatResponse = handleNewUserIntro(user, messageText); // <-- NUEVA L√ìGICA PARA NUEVOS USUARIOS
                user.setChatbot_state(chatResponse.getNextChatbotState()); // Establecer el estado seg√∫n el resultado de la detecci√≥n
                saveUser(user); // Guarda el nuevo usuario (con el n√∫mero de tel√©fono como ID del documento)
                
            } else if ("TELEGRAM".equalsIgnoreCase(channelType)) {
                user.setTelegram_chat_id(fromId);
                user.setChatbot_state("TELEGRAM_WAITING_PHONE_NUMBER");
                saveUser(user); // Guarda el nuevo usuario (con UUID como ID de documento temporal)
                chatResponse = new ChatResponse(
                    "¬°Hola! üëã Soy el bot de *Reset a la Pol√≠tica*. Para identificarte y continuar, por favor, env√≠ame tu n√∫mero de tel√©fono.",
                    "TELEGRAM_WAITING_PHONE_NUMBER"
                );
            } else {
                System.err.println("ChatbotService: Nuevo usuario de canal desconocido ('" + channelType + "'). No se pudo inicializar.");
                return "Lo siento, no puedo procesar tu solicitud desde este canal.";
            }
        } else {
            // Usuario existente encontrado. Ahora, verifica si necesitamos vincular un nuevo identificador.
            System.out.println("ChatbotService: Usuario existente. Estado actual: " + user.getChatbot_state() + ". ID del documento: " + (user.getPhone() != null ? user.getPhone().substring(1) : user.getId()));
            
            boolean userUpdated = false;
            if ("WHATSAPP".equalsIgnoreCase(channelType)) {
                // Si el usuario fue encontrado por Telegram ID (ej.) y el campo 'phone' est√° vac√≠o o es diferente
                if (user.getPhone() == null || !user.getPhone().equals(normalizedPhoneForWhatsapp)) {
                    user.setPhone(normalizedPhoneForWhatsapp);
                    user.setPhone_code("+57"); 
                    userUpdated = true;
                    System.out.println("DEBUG: Actualizando n√∫mero de tel√©fono de usuario existente: " + normalizedPhoneForWhatsapp);
                }
            } else if ("TELEGRAM".equalsIgnoreCase(channelType)) {
                // Si el usuario fue encontrado por n√∫mero de tel√©fono (ej.) y el 'telegram_chat_id' est√° vac√≠o o es diferente
                if (user.getTelegram_chat_id() == null || !user.getTelegram_chat_id().equals(fromId)) {
                    user.setTelegram_chat_id(fromId);
                    userUpdated = true;
                    System.out.println("DEBUG: Actualizando Telegram Chat ID de usuario existente: " + fromId);
                }
            }

            if (userUpdated) {
                // Guardar el objeto de usuario actualizado. saveUser gestionar√° el ID del documento.
                saveUser(user); 
            }

            chatResponse = handleExistingUserMessage(user, messageText);
        }

        if (chatResponse != null) {
            // Enviar el mensaje principal
            if ("WHATSAPP".equalsIgnoreCase(channelType)) {
                watiApiService.sendWhatsAppMessage(fromId, chatResponse.getPrimaryMessage());
            } else if ("TELEGRAM".equalsIgnoreCase(channelType)) {
                telegramApiService.sendTelegramMessage(fromId, chatResponse.getPrimaryMessage());
            } else {
                System.err.println("ChatbotService: Canal desconocido ('" + channelType + "'). No se pudo enviar el mensaje principal.");
            }

            // Enviar mensajes secundarios si existen
            chatResponse.getSecondaryMessage().ifPresent(secondaryMsg -> {
                // Si el mensaje secundario contiene separadores de mensajes (por ejemplo, "###SPLIT###"), div√≠delos y env√≠alos individualmente
                String[] messagesToSend = secondaryMsg.split("###SPLIT###");
                for (String msg : messagesToSend) {
                    msg = msg.trim();
                    if (!msg.isEmpty()) {
                        System.out.println("ChatbotService: Enviando mensaje secundario a " + fromId + " (Canal: " + channelType + "): '" + msg + "'");
                        if ("WHATSAPP".equalsIgnoreCase(channelType)) {
                            watiApiService.sendWhatsAppMessage(fromId, msg);
                        } else if ("TELEGRAM".equalsIgnoreCase(channelType)) {
                            telegramApiService.sendTelegramMessage(fromId, msg);
                        } else {
                            System.err.println("ChatbotService: Canal desconocido ('" + channelType + "'). No se pudo enviar el mensaje secundario.");
                        }
                    }
                }
            });

            user.setChatbot_state(chatResponse.getNextChatbotState());
            user.setUpdated_at(Timestamp.now());
            // Guarda los cambios de estado y datos. saveUser gestionar√° el ID del documento.
            saveUser(user); 

            return chatResponse.getPrimaryMessage();
        }
        return "ERROR: No se pudo generar una respuesta.";
    }

    /**
     * Maneja la l√≥gica de inicio para nuevos usuarios.
     * Intenta detectar un c√≥digo de referido y, si no, procede con la bienvenida general.
     * @param user El objeto User del nuevo usuario.
     * @param messageText El primer mensaje enviado por el usuario.
     * @return ChatResponse con el mensaje y el siguiente estado.
     */
    private ChatResponse handleNewUserIntro(User user, String messageText) {
        Matcher matcher = REFERRAL_MESSAGE_PATTERN.matcher(messageText.trim());

        if (matcher.matches()) {
            String incomingReferralCode = matcher.group(1);
            System.out.println("ChatbotService: Primer mensaje contiene posible c√≥digo de referido: " + incomingReferralCode);
            Optional<User> referrerUser = getUserByReferralCode(incomingReferralCode);

            if (referrerUser.isPresent()) {
                user.setReferred_by_phone(referrerUser.get().getPhone());
                return new ChatResponse(
                    """
                    ¬°Hola! üëã Soy el bot de **Reset a la Pol√≠tica**.
                    ¬°Qu√© emoci√≥n que te unas a esta ola de cambio para Colombia! Veo que vienes referido por un amigo.

                    Para seguir adelante y unirnos en esta gran tarea de transformaci√≥n nacional, te invito a que revises nuestra pol√≠tica de tratamiento de datos, plasmadas aqu√≠ https://danielquinterocalle.com/privacidad. Si continuas esta conversaci√≥n est√°s de acuerdo y aceptas los principios con los que manejamos la informaci√≥n.

                    Acomp√°√±ame hacia una Colombia m√°s justa, equitativa y pr√≥spera para todos. ¬øAceptas el reto de resetear la pol√≠tica?
                    Responde: S√≠ o No.
                    """,
                    "WAITING_TERMS_ACCEPTANCE"
                );
            } else {
                System.out.println("ChatbotService: C√≥digo de referido v√°lido en formato, pero NO ENCONTRADO en el primer mensaje: " + incomingReferralCode);
                // Si el c√≥digo no es v√°lido, se procede con la bienvenida general
                return new ChatResponse(
                    """
                    ¬°Hola! üëã Soy el bot de **Reset a la Pol√≠tica**.
                    Te doy la bienvenida a este espacio de conversaci√≥n, donde construimos juntos el futuro de Colombia.
                    Parece que el c√≥digo de referido que me enviaste no es v√°lido, pero no te preocupes, ¬°podemos continuar!

                    Para seguir adelante y unirnos en esta gran tarea de transformaci√≥n nacional, te invito a que revises nuestra pol√≠tica de tratamiento de datos, plasmadas aqu√≠ https://danielquinterocalle.com/privacidad. Si continuas esta conversaci√≥n est√°s de acuerdo y aceptas los principios con los que manejamos la informaci√≥n.

                    Acomp√°√±ame hacia una Colombia m√°s justa, equitativa y pr√≥spera para todos. ¬øAceptas el reto de resetear la pol√≠tica?
                    Responde: S√≠ o No.
                    """,
                    "WAITING_TERMS_ACCEPTANCE"
                );
            }
        } else {
            System.out.println("ChatbotService: Primer mensaje no contiene c√≥digo de referido. Iniciando flujo general.");
            return new ChatResponse(
                """
                ¬°Hola! üëã Soy el bot de **Reset a la Pol√≠tica**.
                Te doy la bienvenida a este espacio de conversaci√≥n, donde construimos juntos el futuro de Colombia.

                Para seguir adelante y unirnos en esta gran tarea de transformaci√≥n nacional, te invito a que revises nuestra pol√≠tica de tratamiento de datos, plasmadas aqu√≠ https://danielquinterocalle.com/privacidad. Si continuas esta conversaci√≥n est√°s de acuerdo y aceptas los principios con los que manejamos la informaci√≥n.

                Acomp√°√±ame hacia una Colombia m√°s justa, equitativa y pr√≥spera para todos. ¬øAceptas el reto de resetear la pol√≠tica?
                Responde: S√≠ o No.
                """,
                "WAITING_TERMS_ACCEPTANCE"
            );
        }
    }


    private ChatResponse handleExistingUserMessage(User user, String messageText) {
        messageText = messageText.trim(); 

        String currentChatbotState = user.getChatbot_state();
        String responseMessage = "";
        String nextChatbotState = currentChatbotState;
        Optional<String> secondaryMessage = Optional.empty(); // Ahora puede contener m√∫ltiples mensajes separados

        Matcher matcher = REFERRAL_MESSAGE_PATTERN.matcher(messageText);

        switch (currentChatbotState) {
            case "TELEGRAM_WAITING_PHONE_NUMBER":
                String rawNumberInput = messageText.trim();
                String cleanedNumber = rawNumberInput.replaceAll("[^\\d+]", ""); 
                String normalizedPhoneNumber;

                if (cleanedNumber.startsWith("+") && cleanedNumber.length() >= 10) {
                    normalizedPhoneNumber = cleanedNumber;
                    user.setPhone_code(normalizedPhoneNumber.substring(0, Math.min(normalizedPhoneNumber.length(), 4)));
                    System.out.println("DEBUG: Telegram number recognized with country code: " + normalizedPhoneNumber);
                }
                else if (cleanedNumber.matches("^\\d{7,10}$")) { 
                    normalizedPhoneNumber = "+57" + cleanedNumber; 
                    user.setPhone_code("+57");
                    System.out.println("DEBUG: Telegram number normalized to +57: " + normalizedPhoneNumber);
                }
                else {
                    responseMessage = "Eso no parece un n√∫mero de tel√©fono v√°lido. Por favor, aseg√∫rate de que sea un n√∫mero real, incluyendo el c√≥digo de pa√≠s si lo tienes (ej. +573001234567).";
                    nextChatbotState = "TELEGRAM_WAITING_PHONE_NUMBER"; 
                    return new ChatResponse(responseMessage, nextChatbotState);
                }

                if (!STRICT_PHONE_NUMBER_PATTERN.matcher(normalizedPhoneNumber).matches()) {
                    responseMessage = "El formato de n√∫mero de tel√©fono no es v√°lido despu√©s de la normalizaci√≥n. Por favor, aseg√∫rate de que sea un n√∫mero real (ej. +573001234567).";
                    nextChatbotState = "TELEGRAM_WAITING_PHONE_NUMBER";
                    return new ChatResponse(responseMessage, nextChatbotState);
                }

                // *** L√ìGICA DE DETECCI√ìN Y FUSI√ìN DE CUENTAS POR N√öMERO DE TEL√âFONO ***
                Optional<User> existingUserByPhone = findUserByPhoneNumberField(normalizedPhoneNumber);

                if (existingUserByPhone.isPresent()) {
                    User foundUser = existingUserByPhone.get();
                    // Si el usuario ya existe por su n√∫mero de tel√©fono (e.g., registro por WhatsApp)
                    // Y no es el mismo documento de usuario actual (es decir, el actual tiene un UUID temporal)
                    if (!foundUser.getId().equals(user.getId())) { // Compara los IDs de documento
                        System.out.println("DEBUG: Conflicto de usuario detectado. N√∫mero '" + normalizedPhoneNumber + "' ya registrado con ID de documento: " + (foundUser.getPhone() != null ? foundUser.getPhone().substring(1) : foundUser.getId()));
                        System.out.println("DEBUG: Usuario actual (Telegram inicial) ID de documento: " + user.getId() + " con chat_id: " + user.getTelegram_chat_id());

                        // Vincula el Telegram chat ID al usuario existente encontrado por n√∫mero (si a√∫n no lo tiene)
                        if (foundUser.getTelegram_chat_id() == null || !foundUser.getTelegram_chat_id().equals(user.getTelegram_chat_id())) {
                            foundUser.setTelegram_chat_id(user.getTelegram_chat_id());
                            System.out.println("DEBUG: Vinculando Telegram Chat ID " + user.getTelegram_chat_id() + " a usuario existente.");
                        }
                        
                        // Elimina el documento de usuario temporal que se cre√≥ para la interacci√≥n inicial de Telegram (el del UUID)
                        try {
                            firestore.collection("users").document(user.getId()).delete().get();
                            System.out.println("DEBUG: Documento temporal de Telegram (UUID: " + user.getId() + ") eliminado despu√©s de vincular.");
                        } catch (Exception e) {
                            System.err.println("ERROR al eliminar documento temporal de Telegram (UUID: " + user.getId() + "): " + e.getMessage());
                            e.printStackTrace();
                        }

                        // ¬°IMPORTANTE! Asignamos el foundUser al 'user' actual para que el resto del flujo lo use y el 'saveUser' final lo actualice.
                        user = foundUser; 
                        
                        // Mensaje de que ya est√° registrado y se vincul√≥ la cuenta
                        responseMessage = "¬°Ya est√°s registrado con ese n√∫mero! Hemos vinculado tu cuenta de Telegram a tu perfil existente. Puedes continuar.";
                        nextChatbotState = foundUser.getChatbot_state(); // Regresa al estado en el que estaba el usuario ya existente
                        return new ChatResponse(responseMessage, nextChatbotState);
                    }
                    // Si foundUser.getId().equals(user.getId()), significa que el usuario de Telegram est√° actualizando su propio n√∫mero.
                    // Esto se maneja en el flujo normal de abajo.
                }

                user.setPhone(normalizedPhoneNumber); // Guarda el n√∫mero normalizado
                user.setPhone_code(normalizedPhoneNumber.substring(0, Math.min(normalizedPhoneNumber.length(), 4))); // Set phone_code

                responseMessage = """
                        ¬°Gracias! Hemos registrado tu n√∫mero de tel√©fono.
                        Ahora, para seguir adelante y unirnos en esta gran tarea de transformaci√≥n nacional, te invito a que revises nuestra pol√≠tica de tratamiento de datos, plasmadas aqu√≠ https://danielquinterocalle.com/privacidad. Si continuas esta conversaci√≥n est√°s de acuerdo y aceptas los principios con los que manejamos la informaci√≥n.

                        Acomp√°√±ame hacia una Colombia m√°s justa, equitativa y pr√≥spera para todos. ¬øAceptas el reto de resetear la pol√≠tica?

                        Responde: S√≠ o No.
                        """;
                nextChatbotState = "WAITING_TERMS_ACCEPTANCE";
                break;

            // ELIMINAMOS LOS ESTADOS "NEW_USER_INTRO" Y "WAITING_REFERRAL_RETRY_OR_PROCEED" DEL SWITCH
            // La l√≥gica inicial de detecci√≥n de referido se mueve a handleNewUserIntro()
            // Y si no hay referido, el flujo avanza directamente a WAITING_TERMS_ACCEPTANCE.

            case "WAITING_TERMS_ACCEPTANCE":
                if (messageText.equalsIgnoreCase("S√≠") || messageText.equalsIgnoreCase("Si")) {
                    user.setAceptaTerminos(true);
                    responseMessage = "¬øCu√°l es tu nombre?";
                    nextChatbotState = "WAITING_NAME";
                } else {
                    responseMessage = "Para continuar, debes aceptar los t√©rminos. ¬øAceptas? (S√≠/No)";
                    nextChatbotState = "WAITING_TERMS_ACCEPTANCE";
                }
                break;
            case "WAITING_NAME":
                if (messageText != null && !messageText.trim().isEmpty()) {
                    user.setName(messageText.trim());
                    responseMessage = "¬øEn qu√© ciudad vives?";
                    nextChatbotState = "WAITING_CITY";
                } else {
                    responseMessage = "Por favor, ingresa un nombre v√°lido.";
                }
                break;
            case "WAITING_CITY":
                if (messageText != null && !messageText.trim().isEmpty()) {
                    user.setCity(messageText.trim());
                    responseMessage = "Confirmamos tus datos: " + user.getName() + ", de " + user.getCity() + ". ¬øEs correcto? (S√≠/No)";
                    nextChatbotState = "CONFIRM_DATA";
                } else {
                    responseMessage = "Por favor, ingresa una ciudad v√°lida.";
                }
                break;
            case "CONFIRM_DATA":
                if (messageText.equalsIgnoreCase("S√≠") || messageText.equalsIgnoreCase("Si")) {
                    String referralCode = generateUniqueReferralCode();
                    user.setReferral_code(referralCode);

                    String whatsappInviteLink;
                    String telegramInviteLink;
                    
                    // Se crea una lista para almacenar los mensajes secundarios
                    List<String> additionalMessages = new ArrayList<>();

                    try {
                        String whatsappRawReferralText = String.format("Hola, vengo referido por:%s", referralCode);
                        System.out.println("Texto crudo antes de codificar: '" + whatsappRawReferralText + "'");
                        // Codifica los espacios con '%20' para la URL de WhatsApp
                        String encodedWhatsappMessage = URLEncoder.encode(whatsappRawReferralText, StandardCharsets.UTF_8.toString()).replace("+", "%20");
                        // NOTA: Se actualiza el n√∫mero de WhatsApp para el enlace de invitaci√≥n de WhatsApp.
                        whatsappInviteLink = "https://wa.me/573224029924?text=" + encodedWhatsappMessage;

                        String encodedTelegramPayload = URLEncoder.encode(referralCode, StandardCharsets.UTF_8.toString());
                        telegramInviteLink = "https://t.me/" + TELEGRAM_BOT_USERNAME + "?start=" + encodedTelegramPayload;

                        // **MENSAJE ADICIONAL 1: "Amigos, los invito..." (Este debe ser el primer secundario)**
                        String friendsInviteMessage = String.format(
                            "Amigos, los invito a unirse a la campa√±a de Daniel Quintero a la Presidencia: https://wa.me/573224029924?text=%s", // NOTA: Tambi√©n se actualiza aqu√≠ el n√∫mero de WhatsApp.
                            URLEncoder.encode(String.format("Hola, vengo referido por:%s", referralCode), StandardCharsets.UTF_8.toString()).replace("+", "%20")
                        );
                        additionalMessages.add(friendsInviteMessage);

                        // **MENSAJE ADICIONAL 2: "¬°Atenci√≥n! Ahora entrar√°s..." (Este debe ser el segundo secundario)**
                        String aiBotIntroMessage = """
                            ¬°Atenci√≥n! Ahora entrar√°s en conversaci√≥n con una inteligencia artificial.
                            Soy Daniel Quintero Bot, en mi versi√≥n de IA de prueba para este proyecto.
                            Mi objetivo es simular mis respuestas basadas en informaci√≥n clave y mi visi√≥n pol√≠tica.
                            Ten en cuenta que a√∫n estoy en etapa de prueba y mejora continua.
                            ¬°Hazme tu pregunta!
                            """;
                        additionalMessages.add(aiBotIntroMessage);

                    } catch (UnsupportedEncodingException e) {
                        System.err.println("ERROR: No se pudo codificar los c√≥digos de referido. Causa: " + e.getMessage());
                        e.printStackTrace();
                        whatsappInviteLink = "https://wa.me/573224029924?text=Error%20al%20generar%20referido"; // Actualizado el n√∫mero
                        telegramInviteLink = "https://t.me/" + TELEGRAM_BOT_USERNAME + "?start=Error";
                        additionalMessages.clear(); // Limpiar si hubo error para no enviar mensajes parciales
                        additionalMessages.add("Error al generar los mensajes de invitaci√≥n."); // Mensaje de fallback
                    }

                    // MENSAJE PRINCIPAL: "Gracias por unirte..."
                    responseMessage = String.format(
                        """
                        %s, gracias por unirte a la ola de cambio que estamos construyendo para Colombia. Hasta ahora tienes 0 personas referidas. Ayudanos a crecer y gana puestos dentro de la campa√±a.
                        
                        Sabemos que muchos comparten la misma visi√≥n de un futuro mejor, y por eso quiero invitarte a que compartas este proyecto con tus amigos, familiares y conocidos. Juntos podemos lograr una transformaci√≥n real y profunda.

                        Env√≠ales el siguiente enlace de referido:
                        """,
                        user.getName()// El enlace de WhatsApp se incluye en el mensaje principal
                    );

                    // Unir los mensajes adicionales con un separador especial para enviarlos individualmente
                    secondaryMessage = Optional.of(String.join("###SPLIT###", additionalMessages));

                    nextChatbotState = "COMPLETED";
                } else {
                    responseMessage = "Por favor, vuelve a escribir tu nombre completo para corregir tus datos.";
                    nextChatbotState = "WAITING_NAME";
                }
                break;
            case "COMPLETED":
                System.out.println("ChatbotService: Usuario COMPLETED. Pasando consulta a AI Bot.");

                // Determina el ID de sesi√≥n m√°s fiable. El tel√©fono es la clave para unificar canales.
                String sessionId = user.getPhone();

                // Fallback: Si el tel√©fono es nulo (estado inconsistente), pero tenemos un ID de Telegram, √∫salo para no cortar la conversaci√≥n.
                if ((sessionId == null || sessionId.isEmpty()) && user.getTelegram_chat_id() != null) {
                    System.err.println("ADVERTENCIA: Usuario COMPLETED sin tel√©fono. Usando Telegram Chat ID (" + user.getTelegram_chat_id() + ") como fallback para la sesi√≥n de IA. Doc ID: " + user.getId());
                    sessionId = user.getTelegram_chat_id();
                }

                if (sessionId != null && !sessionId.isEmpty()) {
                    responseMessage = aiBotService.getAIResponse(sessionId, messageText);
                    nextChatbotState = "COMPLETED";
                } else {
                    // Esto es un error cr√≠tico de datos. El usuario no tiene identificador.
                    System.err.println("ERROR CR√çTICO: Usuario COMPLETED sin un ID de sesi√≥n v√°lido (ni tel√©fono, ni Telegram ID). Doc ID: " + user.getId());
                    responseMessage = "Lo siento, hemos encontrado un problema con tu registro y no puedo continuar la conversaci√≥n. Por favor, contacta a soporte.";
                    nextChatbotState = "COMPLETED"; // Se mantiene en el estado, pero con un error.
                }
                break;
            default:
                // Si el usuario llega a un estado desconocido, lo redirigimos al inicio sin pedir "INICIAR"
                // e intentando la detecci√≥n de referido si es un mensaje nuevo.
                System.out.println("ChatbotService: Usuario en estado desconocido ('" + currentChatbotState + "'). Redirigiendo al flujo de inicio.");
                return handleNewUserIntro(user, messageText); // Reutilizar la l√≥gica de inicio
        }

        return new ChatResponse(responseMessage, nextChatbotState, secondaryMessage);
    }

    // --- M√©todos Auxiliares para b√∫squeda de usuario ---

    /**
     * Busca un usuario por su campo 'phone'.
     * Requiere que el campo 'phone' est√© indexado en Firestore.
     */
    private Optional<User> findUserByPhoneNumberField(String phoneNumber) {
        try {
            ApiFuture<QuerySnapshot> future = firestore.collection("users")
                                            .whereEqualTo("phone", phoneNumber)
                                            .limit(1)
                                            .get();
            QuerySnapshot querySnapshot = future.get();

            if (!querySnapshot.isEmpty()) {
                DocumentSnapshot document = querySnapshot.getDocuments().get(0);
                return Optional.ofNullable(document.toObject(User.class));
            } else {
                return Optional.empty();
            }
        } catch (Exception e) {
            System.err.println("ERROR al buscar usuario por campo 'phone' en Firestore (" + phoneNumber + "): " + e.getMessage());
            return Optional.empty();
        }
    }

    /**
     * Busca un usuario por su campo 'telegram_chat_id'.
     * Requiere que el campo 'telegram_chat_id' est√© indexado en Firestore.
     */
    private Optional<User> findUserByTelegramChatIdField(String telegramChatId) {
        try {
            ApiFuture<QuerySnapshot> future = firestore.collection("users")
                                            .whereEqualTo("telegram_chat_id", telegramChatId)
                                            .limit(1)
                                            .get();
            QuerySnapshot querySnapshot = future.get();

            if (!querySnapshot.isEmpty()) {
                DocumentSnapshot document = querySnapshot.getDocuments().get(0);
                return Optional.ofNullable(document.toObject(User.class));
            } else {
                return Optional.empty();
            }
        } catch (Exception e) {
            System.err.println("ERROR al buscar usuario por campo 'telegram_chat_id' en Firestore (" + telegramChatId + "): " + e.getMessage());
            return Optional.empty();
        }
    }
    
    /**
     * Busca un usuario por su ID de documento.
     * √ötil si se guarda por phone number sin el '+', o por UUID.
     */
    private Optional<User> findUserByDocumentId(String documentId) {
        try {
            ApiFuture<DocumentSnapshot> future = firestore.collection("users").document(documentId).get();
            DocumentSnapshot document = future.get();
            if (document.exists()) {
                return Optional.ofNullable(document.toObject(User.class));
            } else {
                return Optional.empty();
            }
        } catch (Exception e) {
            System.err.println("ERROR al buscar usuario por ID de documento en Firestore (" + documentId + "): " + e.getMessage());
            return Optional.empty();
        }
    }

    /**
     * Unifica la b√∫squeda de usuario, intentando por n√∫mero de tel√©fono o por chat ID de Telegram.
     * Esta es la funci√≥n principal que debe usarse para encontrar un usuario existente.
     */
    private Optional<User> findUserByAnyIdentifier(String fromId, String channelType) {
        Optional<User> user = Optional.empty();

        String cleanedFromId = fromId.replaceAll("[^\\d+]", ""); 

        // 1. Intentar buscar por el campo 'phone'.
        String phoneNumberToSearch = "";
        
        if (cleanedFromId.startsWith("+") && STRICT_PHONE_NUMBER_PATTERN.matcher(cleanedFromId).matches()) {
            phoneNumberToSearch = cleanedFromId; // Ya viene correcto, ej. "+573123456789"
        } 
        else if (cleanedFromId.matches("^\\d{10,15}$")) { 
            phoneNumberToSearch = "+" + cleanedFromId; // Convierte "573227281752" a "+573227281752"
        }
        
        if (!phoneNumberToSearch.isEmpty() && STRICT_PHONE_NUMBER_PATTERN.matcher(phoneNumberToSearch).matches()) {
            user = findUserByPhoneNumberField(phoneNumberToSearch);
            if (user.isPresent()) {
                System.out.println("DEBUG: Usuario encontrado por campo 'phone': " + phoneNumberToSearch);
                return user;
            }
        } else {
            System.out.println("DEBUG: FromId '" + fromId + "' normalizado a '" + phoneNumberToSearch + "' no es un formato de tel√©fono v√°lido para b√∫squeda por 'phone'.");
        }


        // 2. Si no se encontr√≥ por n√∫mero de tel√©fono, intentar buscar por el ID de documento (si el fromId coincide con un UUID o un n√∫mero sin '+')
        // Esto es crucial para Telegram que guarda inicialmente por UUID, y para WhatsApp si el doc ID es solo el n√∫mero.
        if (!user.isPresent()) {
            // Intentar buscar por fromId como ID de documento directamente
            user = findUserByDocumentId(fromId); 
            if (user.isPresent()) {
                System.out.println("DEBUG: Usuario encontrado por ID de documento: " + fromId);
                return user;
            }
        }


        // 3. Si a√∫n no se encontr√≥, y el canal es Telegram, buscar por campo 'telegram_chat_id'.
        if (!user.isPresent() && "TELEGRAM".equalsIgnoreCase(channelType)) {
            user = findUserByTelegramChatIdField(fromId); // fromId para Telegram es el chat ID
            if (user.isPresent()) {
                System.out.println("DEBUG: Usuario encontrado por campo 'telegram_chat_id': " + fromId);
                return user;
            }
        }
        
        System.out.println("DEBUG: Usuario no encontrado por ning√∫n identificador conocido para fromId: " + fromId + " en canal: " + channelType);
        return Optional.empty();
    }


    private Optional<User> getUserByReferralCode(String referralCode) {
        try {
            ApiFuture<QuerySnapshot> future = firestore.collection("users")
                                            .whereEqualTo("referral_code", referralCode)
                                            .limit(1)
                                            .get();
            QuerySnapshot querySnapshot = future.get();

            if (!querySnapshot.isEmpty()) {
                DocumentSnapshot document = querySnapshot.getDocuments().get(0);
                return Optional.ofNullable(document.toObject(User.class));
            } else {
                return Optional.empty();
            }
        } catch (Exception e) {
            System.err.println("ERROR al buscar usuario por c√≥digo de referido en Firestore: " + e.getMessage());
            return Optional.empty();
        }
    }
    
    /**
     * M√©todo unificado para guardar un objeto User en Firestore.
     * Determina el ID del documento basado en la existencia de un n√∫mero de tel√©fono.
     * Si 'user.phone' est√° presente, usa el n√∫mero de tel√©fono (sin '+') como ID del documento.
     * Si 'user.phone' no est√° presente, usa user.getId() (UUID) como ID del documento.
     */
    private void saveUser(User user) {
        String docIdToUse;
        String oldDocId = null; 

        if (user.getId() == null || user.getId().isEmpty()) {
            System.err.println("ERROR: Intentando guardar usuario, pero user.getId() es nulo/vac√≠o. Generando un nuevo UUID y usando ese.");
            user.setId(UUID.randomUUID().toString()); 
        }

        if (user.getPhone() != null && !user.getPhone().isEmpty()) {
            // Elimina el '+' si est√° presente para usar el n√∫mero como ID del documento
            docIdToUse = user.getPhone().startsWith("+") ? user.getPhone().substring(1) : user.getPhone();
            System.out.println("DEBUG: Guardando usuario con ID de documento (tel√©fono sin '+'): " + docIdToUse);

            // Si el ID del documento actual del objeto (user.getId()) no es el n√∫mero de tel√©fono,
            // significa que el documento original fue guardado con un UUID (ej. usuario inicial de Telegram).
            // En este caso, necesitamos migrar el ID del documento.
            if (!docIdToUse.equals(user.getId())) { 
                oldDocId = user.getId(); // El UUID original que era el ID del documento.
                System.out.println("DEBUG: Detectada migraci√≥n de ID de documento de UUID (" + oldDocId + ") a tel√©fono (" + docIdToUse + ").");
            }
        } else {
            docIdToUse = user.getId(); // Si no hay tel√©fono, usa el UUID como ID del documento.
            System.out.println("DEBUG: Guardando usuario con ID de documento (UUID): " + docIdToUse);
        }

        try {
            // Si hay un 'oldDocId' (UUID) que es diferente del nuevo docIdToUse (tel√©fono),
            // significa que estamos migrando el ID del documento.
            if (oldDocId != null) {
                // Leer el documento existente por el oldDocId para asegurar que tenemos la √∫ltima versi√≥n,
                // luego eliminarlo antes de escribir el nuevo.
                // Aunque user ya es el objeto recuperado/actualizado, el delete/set debe ser at√≥mico si posible.
                // Para simplificar, confiamos en que user tiene los datos correctos.
                firestore.collection("users").document(oldDocId).delete().get();
                System.out.println("DEBUG: Documento antiguo (UUID: " + oldDocId + ") eliminado exitosamente para migraci√≥n.");
            }
            
            // Luego, creamos/actualizamos el documento con el nuevo ID (tel√©fono o UUID final)
            firestore.collection("users").document(docIdToUse).set(user).get();
            System.out.println("DEBUG: Usuario guardado/actualizado en Firestore con ID de documento: " + docIdToUse);
        } catch (Exception e) {
            System.err.println("ERROR al guardar/actualizar/migrar usuario en Firestore con ID " + docIdToUse + " (antiguo ID: " + oldDocId + "): " + e.getMessage());
            e.printStackTrace();
        }
    }


    private String generateUniqueReferralCode() {
        return UUID.randomUUID().toString().substring(0, 8).toUpperCase();
    }
}