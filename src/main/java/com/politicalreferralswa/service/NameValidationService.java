package com.politicalreferralswa.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import java.util.concurrent.CompletableFuture;

@Service
public class NameValidationService {

        @Value("${GEMINI_API_KEY}")
    private String geminiApiKey;
    
    @Value("${GEMINI_API_URL}")
    private String geminiApiUrl;

    private final WebClient webClient;
    private final ObjectMapper objectMapper;

    public NameValidationService(WebClient.Builder webClientBuilder, ObjectMapper objectMapper) {
        this.webClient = webClientBuilder.build();
        this.objectMapper = objectMapper;
    }

    /**
     * Valida si un nombre extra√≠do de WhatsApp es un nombre v√°lido y extrae nombre/apellido usando IA
     * @param fullName El nombre completo a validar
     * @return CompletableFuture<NameValidationResult> con el resultado de la validaci√≥n
     */
    public CompletableFuture<NameValidationResult> validateName(String fullName) {
        if (fullName == null || fullName.trim().isEmpty()) {
            return CompletableFuture.completedFuture(new NameValidationResult(false, "Nombre vac√≠o", null, null, null));
        }

        String prompt = buildValidationPrompt(fullName.trim());
        
        return webClient.post()
                .uri(geminiApiUrl + "?key=" + geminiApiKey)
                .bodyValue(buildRequest(prompt))
                .retrieve()
                .bodyToMono(String.class)
                .map(this::parseValidationResponse)
                .toFuture();
    }

    private String buildValidationPrompt(String fullName) {
        return String.format("""
            Eres un validador y extractor de nombres especializado en identificar nombres reales de personas.
            
            TAREA: Valida si el siguiente texto es un nombre v√°lido de persona y extrae nombre y apellido.
            
            NOMBRE COMPLETO A VALIDAR: "%s"
            
            CRITERIOS DE VALIDACI√ìN:
            1. Debe ser un nombre real de persona (no apodos, n√∫meros, s√≠mbolos, etc.)
            2. Debe tener entre 2 y 50 caracteres
            3. Puede contener espacios para nombres compuestos
            4. Debe contener solo letras, espacios y caracteres especiales comunes en nombres (√°, √©, √≠, √≥, √∫, √±, etc.)
            5. No debe ser un nombre gen√©rico como "Usuario", "WhatsApp", "Contacto", etc.
            6. No debe ser un n√∫mero de tel√©fono o c√≥digo
            7. No debe ser un emoji o s√≠mbolo
            
            REGLAS DE EXTRACCI√ìN:
            1. Si es un solo nombre (ej: "Juan"), extrae solo el nombre
            2. Si tiene nombre y apellido (ej: "Juan P√©rez"), extrae ambos
            3. Si tiene nombre compuesto (ej: "Juan Carlos"), el nombre compuesto va en "name"
            4. Si tiene apellidos compuestos (ej: "Juan P√©rez Gonz√°lez"), todos los apellidos van en "lastname"
            5. Si solo tiene un apellido, va en "lastname"
            
            EJEMPLOS DE EXTRACCI√ìN:
            - "Juan" ‚Üí name: "Juan", lastname: null
            - "Juan P√©rez" ‚Üí name: "Juan", lastname: "P√©rez"
            - "Mar√≠a Jos√© Rodr√≠guez" ‚Üí name: "Mar√≠a Jos√©", lastname: "Rodr√≠guez"
            - "Carlos Alberto P√©rez Gonz√°lez" ‚Üí name: "Carlos Alberto", lastname: "P√©rez Gonz√°lez"
            - "Ana" ‚Üí name: "Ana", lastname: null
            - "Jos√© Mar√≠a L√≥pez" ‚Üí name: "Jos√© Mar√≠a", lastname: "L√≥pez"
            
            EJEMPLOS DE NOMBRES INV√ÅLIDOS:
            - "Usuario"
            - "WhatsApp"
            - "Contacto"
            - "123456"
            - "ABC123"
            - "üëã"
            - "Hola"
            - "Test"
            - "Admin"
            - "User"
            - "Unknown"
            - "Sin nombre"
            - "No disponible"
            
            RESPONDE SOLO EN JSON:
            {
              "isValid": true/false,
              "reason": "explicaci√≥n de por qu√© es v√°lido o inv√°lido",
              "name": "nombre extra√≠do (sin apellido)",
              "lastname": "apellido extra√≠do (null si no hay)",
              "suggestedName": "nombre sugerido si es inv√°lido, null si es v√°lido"
            }
            """, fullName);
    }

    private String buildRequest(String prompt) {
        return String.format("""
            {
              "contents": [
                {
                  "parts": [
                    {
                      "text": "%s"
                    }
                  ]
                }
              ],
              "generationConfig": {
                "temperature": 0.1,
                "topK": 1,
                "topP": 1,
                "maxOutputTokens": 200
              }
            }
            """, prompt.replace("\"", "\\\"").replace("\n", "\\n"));
    }

    private NameValidationResult parseValidationResponse(String response) {
        try {
            JsonNode rootNode = objectMapper.readTree(response);
            JsonNode candidates = rootNode.path("candidates");
            
            if (candidates.isArray() && candidates.size() > 0) {
                JsonNode content = candidates.get(0).path("content");
                JsonNode parts = content.path("parts");
                
                if (parts.isArray() && parts.size() > 0) {
                    String text = parts.get(0).path("text").asText();
                    
                    // Limpiar el texto de markdown si est√° presente
                    text = text.replaceAll("```json\\s*", "").replaceAll("```\\s*", "").trim();
                    
                    JsonNode validationData = objectMapper.readTree(text);
                    
                    boolean isValid = validationData.path("isValid").asBoolean();
                    String reason = validationData.path("reason").asText();
                    String extractedName = validationData.path("name").asText(null);
                    String extractedLastname = validationData.path("lastname").asText(null);
                    String suggestedName = validationData.path("suggestedName").asText(null);
                    
                    return new NameValidationResult(isValid, reason, extractedName, extractedLastname, suggestedName);
                }
            }
            
            return new NameValidationResult(false, "Error al procesar respuesta de IA", null, null, null);
            
        } catch (Exception e) {
            System.err.println("Error al parsear respuesta de validaci√≥n: " + e.getMessage());
            return new NameValidationResult(false, "Error al validar nombre", null, null, null);
        }
    }

    public static class NameValidationResult {
        private final boolean isValid;
        private final String reason;
        private final String extractedName;
        private final String extractedLastname;
        private final String suggestedName;

        public NameValidationResult(boolean isValid, String reason, String extractedName, String extractedLastname, String suggestedName) {
            this.isValid = isValid;
            this.reason = reason;
            this.extractedName = extractedName;
            this.extractedLastname = extractedLastname;
            this.suggestedName = suggestedName;
        }

        public boolean isValid() { return isValid; }
        public String getReason() { return reason; }
        public String getExtractedName() { return extractedName; }
        public String getExtractedLastname() { return extractedLastname; }
        public String getSuggestedName() { return suggestedName; }
    }
} 