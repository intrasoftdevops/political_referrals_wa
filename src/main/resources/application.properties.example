# ================================================
# TEMPLATE DE CONFIGURACIÓN - NO USAR DIRECTAMENTE
# ================================================
# 
# Este archivo es un template. Para usar:
# 1. BASE: Crear application.properties con spring.profiles.active=prod
# 2. LOCAL: Copiar a application-local.properties y ajustar valores
# 3. PRODUCCIÓN: Usar application-prod.properties con variables de entorno
# 4. CLOUD RUN: Las variables se configuran automáticamente

# ================================================
# CONFIGURACIÓN BASE REQUERIDA
# ================================================
# IMPORTANTE: Debes crear un archivo application.properties con:
# spring.profiles.active=prod

spring.application.name=political_referrals_wa

# Puerto de la aplicación
server.port=${PORT:8080}

# Google Cloud Project ID
# Para crear en GCP: gcloud secrets create gcp-project-id --data-file=<(echo -n "tu-project-id")
spring.cloud.gcp.project-id=${SPRING_CLOUD_GCP_PROJECT_ID:your-project-id}

# Configuración de Actuator para Health Checks
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=always
management.health.defaults.enabled=true
management.endpoints.web.base-path=/actuator

# Configuración de Tomcat
spring.main.web-application-type=servlet
server.tomcat.threads.max=200
server.tomcat.threads.min-spare=10
server.tomcat.connection-timeout=20000
server.tomcat.max-connections=8192

# Configuración de Swagger/OpenAPI
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.operationsSorter=method
springdoc.swagger-ui.tagsSorter=alpha
springdoc.swagger-ui.doc-expansion=list
springdoc.swagger-ui.try-it-out-enabled=true
springdoc.swagger-ui.filter=true

# ================================================
# CREDENCIALES Y TOKENS (CONFIGURAR SEGÚN PERFIL)
# ================================================

# Webhook verification token
# Para crear en GCP: gcloud secrets create webhook-verify-token --data-file=<(echo -n "tu-webhook-token")
webhook.verify-token=${WEBHOOK_VERIFY_TOKEN:your-webhook-token}

# Telegram Bot Configuration
# Para crear en GCP: gcloud secrets create telegram-bot-token --data-file=<(echo -n "tu-telegram-token")
telegram.bot.token=${TELEGRAM_BOT_TOKEN:your-telegram-token}
# Para crear en GCP: gcloud secrets create telegram-bot-username --data-file=<(echo -n "tu-telegram-username")
telegram.bot.username=${TELEGRAM_BOT_USERNAME:your-telegram-username}

# Wati API Configuration
wati.api.endpoint.base=https://live-mt-server.wati.io:443
# Para crear en GCP: gcloud secrets create wati-tenant-id --data-file=<(echo -n "tu-tenant-id")
wati.api.tenant-id=${WATI_TENANT_ID:your-tenant-id}
# Para crear en GCP: gcloud secrets create wati-api-token --data-file=<(echo -n "tu-wati-token")
wati.api.token=${WATI_API_TOKEN:your-wati-token}

# Gemini AI Configuration
# Para crear en GCP: gcloud secrets create gemini-api-key --data-file=<(echo -n "tu-gemini-key")
gemini.api.key=${GEMINI_API_KEY:your-gemini-key}
gemini.api.url=https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent

# Analytics Configuration
# Para crear en GCP: gcloud secrets create analytics-jwt-secret --data-file=<(echo -n "tu-jwt-secret")
analytics.jwt.secret=${ANALYTICS_JWT_SECRET:your-jwt-secret}
analytics.jwt.expiration.minutes=60

# ================================================
# URLs DE SERVICIOS (CONFIGURAR SEGÚN PERFIL)
# ================================================

# AI Bot endpoint
ai.bot.endpoint=${AI_BOT_ENDPOINT:your-ai-bot-url}

# Chatbot IA URL
chatbot.ia.url=${CHATBOT_IA_URL:your-chatbot-url}

# Welcome video URL
welcome.video.url=${WELCOME_VIDEO_URL:your-video-url}

# ================================================
# CONFIGURACIÓN DE NOTIFICACIONES WHATSAPP
# ================================================

# Habilitar/deshabilitar notificaciones
wati.notification.enabled=${WATI_NOTIFICATION_ENABLED:true}

# ID del grupo de WhatsApp (prioridad alta)
# Para crear en GCP: gcloud secrets create wati-notification-group-id --data-file=<(echo -n "tu-whatsapp-group-id")
wati.notification.group.id=${WATI_NOTIFICATION_GROUP_ID:}

# Números de teléfono para notificaciones (fallback)
# Para crear en GCP: gcloud secrets create wati-notification-phones --data-file=<(echo -n "tu-whatsapp-phones")
wati.notification.phones=${WATI_NOTIFICATION_PHONES:your-phone-numbers}

# ================================================
# CONFIGURACIONES AVANZADAS
# ================================================

# Forzar IPv4 (útil para Cloud Run)
java.net.preferIPv4Stack=true

# Configuración de logging (ajustar según perfil)
logging.level.com.politicalreferralswa=INFO
logging.level.org.springframework.web=INFO
logging.level.org.springframework.boot=INFO

# ================================================
# COMANDOS PARA CREAR SECRETOS EN GCP
# ================================================
# 
# Ejecutar estos comandos en Google Cloud Shell o local con gcloud CLI:
#
# 1. Configurar proyecto:
#    gcloud config set project TU_PROJECT_ID
#
# 2. Crear secretos:
#    gcloud secrets create gcp-project-id --data-file=<(echo -n "tu-project-id")
#    gcloud secrets create webhook-verify-token --data-file=<(echo -n "tu-webhook-token")
#    gcloud secrets create telegram-bot-token --data-file=<(echo -n "tu-telegram-token")
#    gcloud secrets create telegram-bot-username --data-file=<(echo -n "tu-telegram-username")
#    gcloud secrets create wati-tenant-id --data-file=<(echo -n "tu-tenant-id")
#    gcloud secrets create wati-api-token --data-file=<(echo -n "tu-wati-token")
#    gcloud secrets create gemini-api-key --data-file=<(echo -n "tu-gemini-key")
#    gcloud secrets create analytics-jwt-secret --data-file=<(echo -n "tu-jwt-secret")
#    gcloud secrets create wati-notification-group-id --data-file=<(echo -n "tu-whatsapp-group-id")
#    gcloud secrets create wati-notification-phones --data-file=<(echo -n "tu-whatsapp-phones")
#
# 3. Verificar secretos creados:
#    gcloud secrets list
#
# 4. Para producción, usar application-prod.properties con variables de entorno

# ================================================
# INSTRUCCIONES DE CONFIGURACIÓN
# ================================================
# 
# PASO 1: Crear archivo base (REQUERIDO)
# Crear src/main/resources/application.properties con:
# spring.profiles.active=prod
#
# PASO 2: Configurar perfil local (OPCIONAL)
# Copiar este archivo a application-local.properties
# Reemplazar valores con credenciales reales
#
# PASO 3: Configurar perfil producción (OPCIONAL)
# Usar application-prod.properties con variables de entorno
# Las credenciales se configuran via GCP Secret Manager
#
# PASO 4: Ejecutar aplicación
# mvn clean install -DskipTests
# java -jar target/political_referrals_wa-0.0.1-SNAPSHOT.jar
#
# NOTA: El perfil 'prod' se activa automáticamente desde application.properties