# Configuración de Producción - ARCHIVO DE EJEMPLO
# ================================================
# Copia este archivo a application-prod.properties y configura tus valores

spring.application.name=political_referrals_wa
# Para Cloud Run, usar la variable de entorno PORT que GCP proporciona
# server.port=${PORT:8080}

# Google Cloud Project ID (se configura via variable de entorno SPRING_CLOUD_GCP_PROJECT_ID)
# spring.cloud.gcp.project-id=${SPRING_CLOUD_GCP_PROJECT_ID}

# Para Cloud Run, las credenciales se manejan via variables de entorno
# spring.cloud.gcp.credentials.location=classpath:political-referrals-wa-key.json

# Token para la verificación de webhooks de Meta (se configura via variable de entorno WEBHOOK_VERIFY_TOKEN)
# webhook.verify-token=${WEBHOOK_VERIFY_TOKEN}

# Credenciales para la API de Telegram Bot (se configuran via variables de entorno)
# telegram.bot.token=${TELEGRAM_BOT_TOKEN}
# telegram.bot.username=${TELEGRAM_BOT_USERNAME}

# Wati API Configuration (se configuran via variables de entorno)
wati.api.endpoint.base=https://live-mt-server.wati.io:443
# wati.api.tenant-id=${WATI_TENANT_ID}
# wati.api.token=${WATI_API_TOKEN}

# Propiedad para forzar IPv4 (dejémosla, puede ayudar con la estabilidad)
java.net.preferIPv4Stack=true

# Configuración para IA - Chatbot de Política y Tribus (se configura via variable de entorno)
# ai.bot.endpoint=${AI_BOT_ENDPOINT:https://chatbotia-331919709696.us-east1.run.app}

# Configuración para Gemini AI (se configura via variable de entorno GEMINI_API_KEY)
# gemini.api.key=${GEMINI_API_KEY}
gemini.api.url=https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent

# Configuración para Chatbot IA (análisis de tribus) (se configura via variable de entorno)
# chatbot.ia.url=${CHATBOT_IA_URL:https://chatbotia-331919709696.us-east1.run.app}

# Configuración para Analytics - CRM Político API (se configura via variable de entorno)
# analytics.endpoint.url=${ANALYTICS_ENDPOINT_URL:https://user-referrals-api-331919709696.us-central1.run.app}
# analytics.jwt.secret=${ANALYTICS_JWT_SECRET}
analytics.jwt.expiration.minutes=60

# Configuración de Swagger/OpenAPI
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.operationsSorter=method
springdoc.swagger-ui.tagsSorter=alpha
springdoc.swagger-ui.doc-expansion=list
springdoc.swagger-ui.try-it-out-enabled=true
springdoc.swagger-ui.filter=true

# Welcome Video Configuration (se configura via variable de entorno)
# welcome.video.url=${WELCOME_VIDEO_URL:https://storage.googleapis.com/intrasoft-reset-politica/WhatsApp%20Video%202025-08-01%20at%2013.mp4}

# ================================================
# INSTRUCCIONES DE CONFIGURACIÓN:
# ================================================
# 1. Copia este archivo: cp application-prod.properties.example application-prod.properties
# 2. Edita application-prod.properties con tus valores reales
# 3. NO subas application-prod.properties al repositorio
# 4. Para producción, usa variables de entorno en GitHub Actions
# ================================================ 