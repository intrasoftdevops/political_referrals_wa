spring.application.name=political_referrals_wa
# Para Cloud Run, usar la variable de entorno PORT que GCP proporciona
server.port=${PORT:8080}

# Google Cloud Project ID (se configura via variable de entorno SPRING_CLOUD_GCP_PROJECT_ID)
spring.cloud.gcp.project-id=${SPRING_CLOUD_GCP_PROJECT_ID:intreasoft-daniel}

# Para Cloud Run, las credenciales se manejan via variables de entorno
# spring.cloud.gcp.credentials.location=classpath:political-referrals-wa-key.json

# Token para la verificación de webhooks de Meta (se configura via variable de entorno WEBHOOK_VERIFY_TOKEN)
webhook.verify-token=${WEBHOOK_VERIFY_TOKEN:qaRZjTs8tFTfo5pLt6JwyFtGFPtuxLF6JBYqu0YcXsQ}

# Credenciales para la API de Telegram Bot (se configuran via variables de entorno)
telegram.bot.token=${TELEGRAM_BOT_TOKEN:7350149841:AAHsujWqzvh9azw2dMlwby6iZdlEkmisSv4}
telegram.bot.username=${TELEGRAM_BOT_USERNAME:ResetPoliticaBot}

# Wati API Configuration (se configuran via variables de entorno)
wati.api.endpoint.base=https://live-mt-server.wati.io:443
wati.api.tenant-id=${WATI_TENANT_ID:473173}
wati.api.token=${WATI_API_TOKEN:eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiI5ZWViNzJlZi01NmVmLTQzZjUtYjBmOC00NWFjZTVjZjBiZjgiLCJ1bmlxdWVfbmFtZSI6ImludHJhc29mdGRldm9wc0BnbWFpbC5jb20iLCJuYW1laWQiOiJpbnRyYXNvZnRkZXZvcHNAZ21haWwuY29tIiwiZW1haWwiOiJpbnRyYXNvZnRkZXZvcHNAZ21haWwuY29tIiwiYXV0aF90aW1lIjoiMDcvMjUvMjAyNSAyMzo0MzowOSIsInRlbmFudF9pZCI6IjQ3MzE3MyIsImRiX25hbWUiOiJtdC1wcm9kLVRlbmFudHMiLCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3dzLzIwMDgvMDYvaWRlbnRpdHkvY2xhaW1zL3JvbGUiOiJBRE1JTklTVFJBVE9SIiwiZXhwIjoyNTM0MDIzMDA4MDAsImlzcyI6IkNsYXJlX0FJIiwiYXVkIjoiQ2xhcmVfQUkifQ._mgHJCUNWWmdVueTQmoEAEtaIZS9uTkOwh28UffXFDg}

# Propiedad para forzar IPv4 (dejémosla, puede ayudar con la estabilidad)
java.net.preferIPv4Stack=true

# Configuración para IA - Chatbot de Política y Tribus (se configura via variable de entorno)
ai.bot.endpoint=${AI_BOT_ENDPOINT:https://chatbotia-331919709696.us-east1.run.app}

# Configuración para Gemini AI (se configura via variable de entorno GEMINI_API_KEY)
gemini.api.key=${GEMINI_API_KEY:AIzaSyA73v4PVS8kaID6TWQcW-F31qPk2BiBNHo}
gemini.api.url=https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent

# Configuración para Chatbot IA (análisis de tribus) (se configura via variable de entorno)
chatbot.ia.url=${CHATBOT_IA_URL:https://chatbotia-331919709696.us-east1.run.app}

# Configuración para Analytics - CRM Político API (se configura via variable de entorno)
analytics.endpoint.url=${ANALYTICS_ENDPOINT_URL:https://user-referrals-api-331919709696.us-central1.run.app}
analytics.jwt.secret=${ANALYTICS_JWT_SECRET:z4PiqjH5bJEUTcDLz4q//FX4MZXvrN7vQi+38KK5r1g=}
analytics.jwt.expiration.minutes=60

# Configuración de Swagger/OpenAPI
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.operationsSorter=method
springdoc.swagger-ui.tagsSorter=alpha
springdoc.swagger-ui.doc-expansion=list
springdoc.swagger-ui.try-it-out-enabled=true
springdoc.swagger-ui.filter=true

# Welcome Video Configuration (se configura via variable de entorno)
welcome.video.url=${WELCOME_VIDEO_URL:https://storage.googleapis.com/intrasoft-reset-politica/WhatsApp%20Video%202025-08-01%20at%2013.mp4}

# ================================================
# Configuración de Notificaciones WhatsApp
# ================================================

# Habilitar/deshabilitar notificaciones
wati.notification.enabled=${WATI_NOTIFICATION_ENABLED:true}

# ID del grupo de WhatsApp (prioridad alta)
# Formato: número de teléfono del grupo (ej: 573001234567)
wati.notification.group.id=${WATI_NOTIFICATION_GROUP_ID:}

# Números de teléfono para notificaciones (fallback si no hay grupo)
# Formato: números separados por coma (ej: 573001234567,573007654321)
wati.notification.phones=${WATI_NOTIFICATION_PHONES:573227281752}