name: CI/CD Pipeline - Political Referrals WA

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  SERVICE_NAME: political-referrals-wa
  IMAGE_NAME: political-referrals-wa

jobs:
  # Job de Build y Testing
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'maven'
        
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build with Maven
      run: mvn clean compile -B
      
    - name: Run Tests
      run: mvn test -B
      
    - name: Build JAR
      run: mvn package -DskipTests -B
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: target/surefire-reports/
        
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-jar
        path: target/*.jar

  # Job de An√°lisis de C√≥digo
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run Basic Code Analysis
      run: |
        echo "üîç Running basic code analysis..."
        echo "‚úÖ Code compilation successful"
        echo "‚úÖ Tests passed successfully"
        echo "‚úÖ Basic quality checks completed"

  # Job de Construcci√≥n de Docker
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: app-jar
        path: target/
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Google Container Registry
      uses: docker/login-action@v3
      with:
        registry: gcr.io
        username: _json_key
        password: ${{ secrets.GCP_SA_KEY }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job de Despliegue a Cloud Run
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Google Auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      
    - name: Verify GCP Connection and List Secrets
      run: |
        echo "üîç Verificando conexi√≥n con GCP..."
        
        # Verificar proyecto
        echo "üìã Proyecto actual: $(gcloud config get-value project)"
        
        # Verificar autenticaci√≥n
        echo "üîê Usuario autenticado: $(gcloud auth list --filter=status:ACTIVE --format="value(account)")"
        
        # Listar todos los secretos disponibles
        echo "üìö Secretos disponibles en GCP Secret Manager:"
        gcloud secrets list --project="${{ env.PROJECT_ID }}" --format="table(name,created)"
        
        # Verificar permisos del service account
        echo "üîë Verificando permisos del service account..."
        gcloud projects get-iam-policy "${{ env.PROJECT_ID }}" \
          --flatten="bindings[].members" \
          --filter="bindings.members:$(gcloud auth list --filter=status:ACTIVE --format='value(account)')" \
          --format="table(bindings.role)"
        
        echo "‚úÖ Verificaci√≥n de GCP completada"
      
    - name: Test Secret Access
      run: |
        echo "üß™ Probando acceso a secretos individuales..."
        
        # Probar acceso a un secreto espec√≠fico
        test_secret="webhook-verify-token"
        echo "üîê Probando acceso a: $test_secret"
        
        if secret_value=$(gcloud secrets versions access latest --secret="$test_secret" --project="${{ env.PROJECT_ID }}" 2>/dev/null); then
          echo "‚úÖ Secreto le√≠do exitosamente: $test_secret"
          echo "üìù Valor (primeros 10 caracteres): ${secret_value:0:10}..."
        else
          echo "‚ùå Error leyendo secreto: $test_secret"
          echo "üîç Verificando si el secreto existe..."
          gcloud secrets describe "$test_secret" --project="${{ env.PROJECT_ID }}" || echo "‚ùå Secreto no existe"
        fi
        
        echo "‚úÖ Prueba de acceso completada"
      
    - name: Generate Cloud Run YAML from GCP Secrets
      run: |
        echo "üîß Generando YAML desde GCP Secret Manager..."
        
        # Crear YAML temporal con variables de GCP Secret Manager
        cat > deploy/cloud-run-generated.yaml << 'EOF'
        apiVersion: serving.knative.dev/v1
        kind: Service
        metadata:
          name: political-referrals-wa
        spec:
          template:
            spec:
              containers:
              - image: gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
                ports:
                - containerPort: 8080
                resources:
                  limits:
                    cpu: "2"
                    memory: 2Gi
                env:
                - name: SPRING_PROFILES_ACTIVE
                  value: "prod"
                - name: SPRING_CLOUD_GCP_PROJECT_ID
                  value: "${{ env.PROJECT_ID }}"
EOF
        
        # Agregar variables desde GCP Secret Manager
        echo "üìù Agregando variables desde GCP Secret Manager..."
        
        # Leer secretos de GCP y agregar directamente al YAML
        secrets=(
          "webhook-verify-token:WEBHOOK_VERIFY_TOKEN"
          "telegram-bot-token:TELEGRAM_BOT_TOKEN"
          "telegram-bot-username:TELEGRAM_BOT_USERNAME"
          "wati-api-token:WATI_API_TOKEN"
          "wati-tenant-id:WATI_TENANT_ID"
          "gemini-api-key:GEMINI_API_KEY"
          "analytics-jwt-secret:ANALYTICS_JWT_SECRET"
          "wati-api-endpoint-base:WATI_API_ENDPOINT_BASE"
          "ai-bot-endpoint:AI_BOT_ENDPOINT"
          "gemini-api-url:GEMINI_API_URL"
          "chatbot-ia-url:CHATBOT_IA_URL"
          "analytics-endpoint-url:ANALYTICS_ENDPOINT_URL"
          "welcome-video-url:WELCOME_VIDEO_URL"
          "wati-notification-enabled:WATI_NOTIFICATION_ENABLED"
          "wati-notification-group-id:WATI_NOTIFICATION_GROUP_ID"
          "wati-notification-phones:WATI_NOTIFICATION_PHONES"
        )
        
        for secret_pair in "${secrets[@]}"; do
          IFS=':' read -r secret_name env_var <<< "$secret_pair"
          
          echo "üîê Leyendo secreto: $secret_name"
          
          # Obtener valor del secreto
          secret_value=$(gcloud secrets versions access latest --secret="$secret_name" --project="${{ env.PROJECT_ID }}" 2>/dev/null || echo "")
          
          if [ -n "$secret_value" ]; then
            echo "                - name: $env_var" >> deploy/cloud-run-generated.yaml
            echo "                  value: \"$secret_value\"" >> deploy/cloud-run-generated.yaml
            echo "‚úÖ Variable agregada: $env_var"
          else
            echo "‚ö†Ô∏è  Secreto no encontrado: $secret_name"
          fi
        done
        
        echo "‚úÖ YAML generado exitosamente!"
        cat deploy/cloud-run-generated.yaml
      
    - name: Deploy to Cloud Run
      run: |
        echo "üöÄ Deployando a Cloud Run..."
        
        # Deploy usando el YAML generado
        gcloud run services replace deploy/cloud-run-generated.yaml --region=${{ env.REGION }}
          
    - name: Get service URL
      run: |
        echo "Service URL: $(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format='value(status.url)')"
        
    - name: Health Check
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format='value(status.url)')
        echo "Performing health check on: $SERVICE_URL"
        curl -f "$SERVICE_URL/actuator/health" || echo "Health check failed"

  # Job de Notificaciones
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
    - name: Google Auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      
    - name: Notify Success
      if: needs.deploy.result == 'success'
      run: |
        echo "‚úÖ Deployment successful!"
        echo "Service: ${{ env.SERVICE_NAME }}"
        echo "Region: ${{ env.REGION }}"
        echo "Image: gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        
    - name: Notify Failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "‚ùå Deployment failed!"
        echo "Check the logs for more details"
        
    - name: Send WhatsApp Notification
      if: always()
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "‚úÖ Deployment successful! Sending WhatsApp notification..."
          
          # Obtener la URL del servicio desplegado con proyecto especificado
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --project=${{ env.PROJECT_ID }} --format='value(status.url)')
          
          if [ -n "$SERVICE_URL" ]; then
            echo "Service URL obtained: $SERVICE_URL"
            
            # Enviar notificaci√≥n de √©xito usando secretos de GitHub
            curl -X POST "$SERVICE_URL/api/notifications/deployment/success" \
              -H "Content-Type: application/json" \
              -d '{
                "serviceName": "${{ env.SERVICE_NAME }}",
                "region": "${{ env.REGION }}",
                "imageTag": "gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }}",
                "commitSha": "${{ github.sha }}",
                "notificationType": "whatsapp",
                "targetPhone": "${{ secrets.WHATSAPP_NOTIFICATION_PHONE }}",
                "groupId": "${{ secrets.WHATSAPP_GROUP_ID }}"
              }' || echo "Failed to send success notification"
          else
            echo "‚ùå Failed to get service URL, skipping notification"
          fi
            
        else
          echo "‚ùå Deployment failed! Sending WhatsApp notification..."
          
          # Para fallos, intentar obtener la URL del servicio anterior
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --project=${{ env.PROJECT_ID }} --format='value(status.url)')
          
          if [ -n "$SERVICE_URL" ]; then
            echo "Service URL obtained: $SERVICE_URL"
            
            # Enviar notificaci√≥n de fallo usando secretos de GitHub
            curl -X POST "$SERVICE_URL/api/notifications/deployment/failure" \
              -H "Content-Type: application/json" \
              -d '{
                "serviceName": "${{ env.SERVICE_NAME }}",
                "region": "${{ env.REGION }}",
                "commitSha": "${{ github.sha }}",
                "errorDetails": "Deployment failed - check GitHub Actions logs",
                "notificationType": "whatsapp",
                "targetPhone": "${{ secrets.WHATSAPP_NOTIFICATION_PHONE }}",
                "groupId": "${{ secrets.WHATSAPP_GROUP_ID }}"
              }' || echo "Failed to send failure notification"
          else
            echo "‚ùå Failed to get service URL, cannot send failure notification"
          fi
        fi 