name: CI/CD Pipeline - Political Referrals WA

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_ID: intreasoft-daniel
  REGION: us-central1
  SERVICE_NAME: political-referrals-wa
  IMAGE_NAME: political-referrals-wa

jobs:
  # Job de Build y Testing
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'
        
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build with Maven
      run: mvn clean compile -B
      
    - name: Run Tests
      run: mvn test -B
      
    - name: Build JAR
      run: mvn package -DskipTests -B
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: target/surefire-reports/
        
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-jar
        path: target/*.jar

  # Job de Construcci√≥n de Docker
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: app-jar
        path: target/
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Google Container Registry
      uses: docker/login-action@v3
      with:
        registry: gcr.io
        username: _json_key
        password: ${{ secrets.GCP_SA_KEY }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job de Despliegue a Cloud Run
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Google Auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --port 8080 \
          --memory 2Gi \
          --cpu 2 \
          --max-instances 10 \
          --set-env-vars SPRING_PROFILES_ACTIVE=prod,SPRING_CLOUD_GCP_PROJECT_ID=${{ env.PROJECT_ID }} \
          --set-env-vars WEBHOOK_VERIFY_TOKEN=${{ secrets.WEBHOOK_VERIFY_TOKEN }} \
          --set-env-vars TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }} \
          --set-env-vars TELEGRAM_BOT_USERNAME=${{ secrets.TELEGRAM_BOT_USERNAME }} \
          --set-env-vars WATI_API_TOKEN=${{ secrets.WATI_API_TOKEN }} \
          --set-env-vars WATI_TENANT_ID=${{ secrets.WATI_TENANT_ID }} \
          --set-env-vars GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }} \
          --set-env-vars ANALYTICS_JWT_SECRET=${{ secrets.ANALYTICS_JWT_SECRET }} \
          --set-env-vars WATI_API_ENDPOINT_BASE=${{ secrets.WATI_API_ENDPOINT_BASE }} \
          --set-env-vars AI_BOT_ENDPOINT=${{ secrets.AI_BOT_ENDPOINT }} \
          --set-env-vars GEMINI_API_URL=${{ secrets.GEMINI_API_URL }} \
          --set-env-vars CHATBOT_IA_URL=${{ secrets.CHATBOT_IA_URL }} \
          --set-env-vars ANALYTICS_ENDPOINT_URL=${{ secrets.ANALYTICS_ENDPOINT_URL }} \
          --set-env-vars WELCOME_VIDEO_URL=${{ secrets.WELCOME_VIDEO_URL }} \
          --set-env-vars WATI_NOTIFICATION_ENABLED=${{ secrets.WATI_NOTIFICATION_ENABLED }} \
          --set-env-vars WATI_NOTIFICATION_GROUP_ID=${{ secrets.WATI_NOTIFICATION_GROUP_ID }} \
          --set-env-vars WATI_NOTIFICATION_PHONES=${{ secrets.WATI_NOTIFICATION_PHONES }}
          
    - name: Get service URL
      run: |
        echo "Service URL: $(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format='value(status.url)')"
        
    - name: Health Check
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format='value(status.url)')
        echo "Performing health check on: $SERVICE_URL"
        curl -f "$SERVICE_URL/actuator/health" || echo "Health check failed"

  # Job de Notificaciones
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
    - name: Google Auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      
    - name: Notify Success
      if: needs.deploy.result == 'success'
      run: |
        echo "Deployment successful!"
        echo "Service: ${{ env.SERVICE_NAME }}"
        echo "Region: ${{ env.REGION }}"
        echo "Image: gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        
    - name: Notify Failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "Deployment failed!"
        echo "Check the logs for more details"
        
    - name: Send WhatsApp Notification
      if: always()
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "Deployment successful! Sending WhatsApp notification..."
          
          # Obtener la URL del servicio desplegado
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --project=${{ env.PROJECT_ID }} --format='value(status.url)')
          
          if [ -n "$SERVICE_URL" ]; then
            echo "Service URL obtained: $SERVICE_URL"
            
            # Enviar notificacion de exito
            curl -X POST "$SERVICE_URL/api/notifications/deployment/success" \
              -H "Content-Type: application/json" \
              -d '{
                "serviceName": "${{ env.SERVICE_NAME }}",
                "region": "${{ env.REGION }}",
                "imageTag": "gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }}",
                "commitSha": "${{ github.sha }}",
                "notificationType": "whatsapp",
                "targetPhone": "${{ secrets.WHATSAPP_NOTIFICATION_PHONE }}",
                "groupId": "${{ secrets.WHATSAPP_GROUP_ID }}"
              }' || echo "Failed to send success notification"
          else
            echo "Failed to get service URL, skipping notification"
          fi
            
        else
          echo "Deployment failed! Sending WhatsApp notification..."
          
          # Obtener la URL del servicio desplegado
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --project=${{ env.PROJECT_ID }} --format='value(status.url)')
          
          if [ -n "$SERVICE_URL" ]; then
            echo "Service URL obtained: $SERVICE_URL"
            
            # Enviar notificacion de fallo
            curl -X POST "$SERVICE_URL/api/notifications/deployment/failure" \
              -H "Content-Type: application/json" \
              -d '{
                "serviceName": "${{ env.SERVICE_NAME }}",
                "region": "${{ env.REGION }}",
                "imageTag": "gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }}",
                "commitSha": "${{ github.sha }}",
                "errorDetails": "Deployment failed - check GitHub Actions logs",
                "notificationType": "whatsapp",
                "targetPhone": "${{ secrets.WHATSAPP_NOTIFICATION_PHONE }}",
                "groupId": "${{ secrets.WHATSAPP_GROUP_ID }}"
              }' || echo "Failed to send failure notification"
          else
            echo "Failed to get service URL, cannot send failure notification"
          fi
        fi 