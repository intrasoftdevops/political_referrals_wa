name: CI/CD Pipeline - Political Referrals WA

on:
  push:
    branches: [ main, dev ]
  workflow_dispatch:

env:
  PROJECT_ID: intreasoft-daniel
  REGION: us-central1
  IMAGE_NAME: political-referrals-wa

jobs:
  # Job de Build y Testing
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'maven'
        
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build with Maven
      run: mvn clean compile -B
      
    - name: Run Tests
      run: mvn test -B
      
    - name: Build JAR
      run: mvn package -DskipTests -B
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: target/surefire-reports/
        
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-jar
        path: target/*.jar

  # Job de Construcción de Docker
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: app-jar
        path: target/
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Google Container Registry
      uses: docker/login-action@v3
      with:
        registry: gcr.io
        username: _json_key
        password: ${{ secrets.GCP_SA_KEY }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job de Despliegue a Cloud Run
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Google Auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      

    - name: Deploy to Cloud Run
      run: |
        # Determinar el nombre del servicio según la rama
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          SERVICE_NAME="political-referrals-wa-prod"
          ENVIRONMENT="prod"
        else
          SERVICE_NAME="political-referrals-wa-dev"
          ENVIRONMENT="dev"
        fi
        
        echo "Deploying to service: $SERVICE_NAME"
        echo "Environment: $ENVIRONMENT"
        
        # Configurar secrets según el ambiente
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          # Secrets para PRODUCCIÓN
          echo "Using PRODUCTION secrets..."
          gcloud run deploy $SERVICE_NAME \
            --image gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --memory 2Gi \
            --cpu 2 \
            --max-instances 10 \
            --set-env-vars SPRING_PROFILES_ACTIVE=$ENVIRONMENT \
            --set-secrets WEBHOOK_VERIFY_TOKEN=webhook-verify-token:latest \
            --set-secrets TELEGRAM_BOT_TOKEN=telegram-bot-token:latest \
            --set-secrets TELEGRAM_BOT_USERNAME=telegram-bot-username:latest \
            --set-secrets WATI_API_TOKEN=wati-api-token-prod:latest \
            --set-secrets WATI_TENANT_ID=wati-tenant-id-prod:latest \
            --set-secrets GEMINI_API_KEY=gemini-api-key-prod:latest \
            --set-secrets ANALYTICS_JWT_SECRET=analytics-jwt-secret-prod:latest \
            --set-secrets WATI_API_ENDPOINT_BASE=wati-api-endpoint-base-prod:latest \
            --set-secrets AI_BOT_ENDPOINT=ai-bot-endpoint-prod:latest \
            --set-secrets GEMINI_API_URL=gemini-api-url-prod:latest \
            --set-secrets CHATBOT_IA_URL=chatbot-ia-url-prod:latest \
            --set-secrets ANALYTICS_ENDPOINT_URL=analytics-endpoint-url-prod:latest \
            --set-secrets WELCOME_VIDEO_URL=welcome-video-url-prod:latest \
            --set-secrets WATI_NOTIFICATION_ENABLED=wati-notification-enabled-prod:latest \
            --set-secrets WATI_NOTIFICATION_GROUP_ID=wati-notification-group-id-prod:latest \
            --set-secrets WATI_NOTIFICATION_PHONES=wati-notification-phones-prod:latest \
            --set-secrets SYSTEM_API_KEY=SYSTEM_API_KEY_PROD:latest \
            --set-secrets FIRESTORE_DATABASE_ID=firestore-database-id-prod:latest
        else
          # Secrets para DESARROLLO
          echo "Using DEVELOPMENT secrets..."
          gcloud run deploy $SERVICE_NAME \
            --image gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --memory 2Gi \
            --cpu 2 \
            --max-instances 10 \
            --set-env-vars SPRING_PROFILES_ACTIVE=$ENVIRONMENT \
            --set-secrets WEBHOOK_VERIFY_TOKEN=webhook-verify-token:latest \
            --set-secrets TELEGRAM_BOT_TOKEN=telegram-bot-token:latest \
            --set-secrets TELEGRAM_BOT_USERNAME=telegram-bot-username:latest \
            --set-secrets WATI_API_TOKEN=wati-api-token:latest \
            --set-secrets WATI_TENANT_ID=wati-tenant-id:latest \
            --set-secrets GEMINI_API_KEY=gemini-api-key:latest \
            --set-secrets ANALYTICS_JWT_SECRET=analytics-jwt-secret:latest \
            --set-secrets WATI_API_ENDPOINT_BASE=wati-api-endpoint-base:latest \
            --set-secrets AI_BOT_ENDPOINT=ai-bot-endpoint:latest \
            --set-secrets GEMINI_API_URL=gemini-api-url:latest \
            --set-secrets CHATBOT_IA_URL=chatbot-ia-url:latest \
            --set-secrets ANALYTICS_ENDPOINT_URL=analytics-endpoint-url:latest \
            --set-secrets WELCOME_VIDEO_URL=welcome-video-url:latest \
            --set-secrets WATI_NOTIFICATION_ENABLED=wati-notification-enabled:latest \
            --set-secrets WATI_NOTIFICATION_GROUP_ID=wati-notification-group-id:latest \
            --set-secrets WATI_NOTIFICATION_PHONES=wati-notification-phones:latest \
            --set-secrets SYSTEM_API_KEY=SYSTEM_API_KEY_DEV:latest \
            --set-secrets FIRESTORE_DATABASE_ID=firestore-database-id-dev:latest
        fi
        

          
    - name: Get service URL
      run: |
        # Determinar el nombre del servicio según la rama
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          SERVICE_NAME="political-referrals-wa-prod"
        else
          SERVICE_NAME="political-referrals-wa-dev"
        fi
        
        echo "Service URL: $(gcloud run services describe $SERVICE_NAME --region=${{ env.REGION }} --format='value(status.url)')"
        
    - name: Health Check
      run: |
        # Determinar el nombre del servicio según la rama
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          SERVICE_NAME="political-referrals-wa-prod"
        else
          SERVICE_NAME="political-referrals-wa-dev"
        fi
        
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=${{ env.REGION }} --format='value(status.url)')
        echo "Performing health check on: $SERVICE_URL"
        curl -f "$SERVICE_URL/actuator/health" || echo "Health check failed"

  # Job de Notificaciones
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
    - name: Google Auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      
    - name: Notify Success
      if: needs.deploy.result == 'success'
      run: |
        echo "Deployment successful!"
        echo "Service: ${{ env.SERVICE_NAME }}"
        echo "Region: ${{ env.REGION }}"
        echo "Image: gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        
    - name: Notify Failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "Deployment failed!"
        echo "Check the logs for more details"
        
    - name: Send WhatsApp Notification
      if: github.ref == 'refs/heads/main' && always()
      run: |
        # Solo enviar notificaciones cuando se despliega a PRODUCCIÓN (main)
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          SERVICE_NAME="political-referrals-wa-prod"
          
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "Deployment to PRODUCTION successful! Sending WhatsApp notification..."
            
            # Obtener la URL del servicio desplegado
            SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=${{ env.REGION }} --project=${{ env.PROJECT_ID }} --format='value(status.url)')
            
            if [ -n "$SERVICE_URL" ]; then
              echo "Service URL obtained: $SERVICE_URL"
              
              # Obtener el título del commit
              COMMIT_TITLE=$(git log -1 --pretty=format:"%s")
              echo "Commit title: $COMMIT_TITLE"
              
              # Enviar notificacion de exito a los números específicos
              curl -X POST "$SERVICE_URL/api/notifications/deployment/success" \
                -H "Content-Type: application/json" \
                -d '{
                  "serviceName": "${{ env.SERVICE_NAME }}",
                  "region": "${{ env.REGION }}",
                  "imageTag": "gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }}",
                  "commitSha": "${{ github.sha }}",
                  "commitTitle": "'"$COMMIT_TITLE"'",
                  "notificationType": "whatsapp",
                  "targetPhones": "${{ secrets.WHATSAPP_NOTIFICATION_PHONES }}",
                  "groupId": "${{ secrets.WHATSAPP_GROUP_ID }}"
                }' || echo "Failed to send success notification"
            else
              echo "Failed to get service URL, skipping notification"
            fi
              
          else
            echo "Deployment to PRODUCTION failed! Sending WhatsApp notification..."
            
            # Obtener la URL del servicio desplegado
            SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=${{ env.REGION }} --project=${{ env.PROJECT_ID }} --format='value(status.url)')
            
            if [ -n "$SERVICE_URL" ]; then
              echo "Service URL obtained: $SERVICE_URL"
              
              # Obtener el título del commit
              COMMIT_TITLE=$(git log -1 --pretty=format:"%s")
              echo "Commit title: $COMMIT_TITLE"
              
              # Enviar notificacion de fallo a los números específicos
              curl -X POST "$SERVICE_URL/api/notifications/deployment/failure" \
                -H "Content-Type: application/json" \
                -d '{
                  "serviceName": "${{ env.SERVICE_NAME }}",
                  "region": "${{ env.REGION }}",
                  "imageTag": "gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }}",
                  "commitSha": "${{ github.sha }}",
                  "commitTitle": "'"$COMMIT_TITLE"'",
                  "errorDetails": "Deployment failed - check GitHub Actions logs",
                  "notificationType": "whatsapp",
                  "targetPhones": "${{ secrets.WHATSAPP_NOTIFICATION_PHONES }}",
                  "groupId": "${{ secrets.WHATSAPP_GROUP_ID }}"
                }' || echo "Failed to send failure notification"
            else
              echo "Failed to get service URL, cannot send failure notification"
            fi
          fi
        else
          echo "Skipping WhatsApp notification - not deploying to PRODUCTION (main branch)"
        fi 